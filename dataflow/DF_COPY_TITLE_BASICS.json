{
	"name": "DF_COPY_TITLE_BASICS",
	"properties": {
		"description": "Data Flow activities to flatten the IMDB files from bronze to silver in ADLS.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_bronze_imdb",
						"type": "DatasetReference"
					},
					"name": "TitleEpisodeSrcBronze"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_bronze_imdb",
						"type": "DatasetReference"
					},
					"name": "TitleRatingsSrcBronze"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_bronze_imdb",
						"type": "DatasetReference"
					},
					"name": "TitleBasicsSrcBronze"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_Silver_imdb",
						"type": "DatasetReference"
					},
					"name": "titleEpisodeSinkSilver"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_Silver_imdb",
						"type": "DatasetReference"
					},
					"name": "titleRatingsSinkSilver"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_Silver_imdb",
						"type": "DatasetReference"
					},
					"name": "SinkTitles"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_Silver_imdb",
						"type": "DatasetReference"
					},
					"name": "SinkGenres"
				}
			],
			"transformations": [
				{
					"name": "SelectEpisodes"
				},
				{
					"name": "Cast"
				},
				{
					"name": "SelectRatings"
				},
				{
					"name": "CastRatings"
				},
				{
					"name": "SelectTitle1"
				},
				{
					"name": "CastTitles"
				},
				{
					"name": "SelectGenres"
				},
				{
					"name": "SelectTitles"
				},
				{
					"name": "ArrayGenres"
				},
				{
					"name": "FlattenGenres"
				},
				{
					"name": "RankGenre"
				}
			],
			"scriptLines": [
				"source(output(",
				"          tconst as string,",
				"          parentTconst as string,",
				"          seasonNumber as string,",
				"          episodeNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('roundRobin', 10)) ~> TitleEpisodeSrcBronze",
				"source(output(",
				"          tconst as string,",
				"          averageRating as string,",
				"          numVotes as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('roundRobin', 10)) ~> TitleRatingsSrcBronze",
				"source(output(",
				"          tconst as string,",
				"          titleType as string,",
				"          primaryTitle as string,",
				"          originalTitle as string,",
				"          isAdult as string,",
				"          startYear as string,",
				"          endYear as string,",
				"          runtimeMinutes as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('roundRobin', 10)) ~> TitleBasicsSrcBronze",
				"TitleEpisodeSrcBronze select(mapColumn(",
				"          title_id = tconst,",
				"          parent_tv_show_title_id = parentTconst,",
				"          season_number = seasonNumber,",
				"          episode_number = episodeNumber",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEpisodes",
				"SelectEpisodes cast(output(",
				"          season_number as integer,",
				"          episode_number as integer",
				"     ),",
				"     errors: true) ~> Cast",
				"TitleRatingsSrcBronze select(mapColumn(",
				"          title_id = tconst,",
				"          average_rating = averageRating,",
				"          num_votes = numVotes",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectRatings",
				"SelectRatings cast(output(",
				"          average_rating as decimal(10,0),",
				"          num_votes as integer",
				"     ),",
				"     errors: true) ~> CastRatings",
				"TitleBasicsSrcBronze select(mapColumn(",
				"          title_id = tconst,",
				"          title_type = titleType,",
				"          primary_title = primaryTitle,",
				"          original_title = originalTitle,",
				"          is_adult = isAdult,",
				"          start_year = startYear,",
				"          end_year = endYear,",
				"          runtime_minutes = runtimeMinutes,",
				"          genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTitle1",
				"SelectTitles cast(output(",
				"          is_adult as boolean,",
				"          start_year as integer,",
				"          end_year as integer,",
				"          runtime_minutes as integer",
				"     ),",
				"     errors: true) ~> CastTitles",
				"SelectTitle1 select(mapColumn(",
				"          title_id,",
				"          genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGenres",
				"SelectTitle1 select(mapColumn(",
				"          title_id,",
				"          title_type,",
				"          primary_title,",
				"          original_title,",
				"          is_adult,",
				"          start_year,",
				"          end_year,",
				"          runtime_minutes",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTitles",
				"SelectGenres derive(genres = split(genres, ',')) ~> ArrayGenres",
				"ArrayGenres foldDown(unroll(genres),",
				"     mapColumn(",
				"          title_id,",
				"          genre = genres",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenGenres",
				"FlattenGenres window(over(title_id),",
				"     asc(genre, true),",
				"     rank = rowNumber()) ~> RankGenre",
				"Cast sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     filePattern:'episode_belongs_to-[n].parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> titleEpisodeSinkSilver",
				"CastRatings sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     filePattern:'title_ratings-[n].parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> titleRatingsSinkSilver",
				"CastTitles sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     filePattern:'titles-[n].parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkTitles",
				"RankGenre sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     filePattern:'title_genres-[n].parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkGenres"
			]
		}
	}
}